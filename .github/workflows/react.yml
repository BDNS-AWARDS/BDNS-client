
name: REACT CI/CD

on:
  push:
      branches: ["main"]
  pull_request_target:
      types: [labeled, closed]

jobs:
  CI:
    if: contains(github.event.pull_request.labels.*.name, 'safe')
    runs-on: ubuntu-20.04

    defaults:
      run:
        working-directory: ./myawards

    steps:
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Cache node modules      # node modules 캐싱
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
        
      - name: Install dependencies
        run: npm install

      - name: Generate build
        run: yarn build
        env:
          CI: ""  

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v2
        with:
          context: ./myawards
          file: ./myawards/Dockerfile

      - name: Push
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v4
        with:
          context: ./myawards
          file: ./myawards/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
  CD:
    if: github.event.pull_request.merged == true
    needs: [CI]
    
    runs-on: ubuntu-20.04

    steps:
      ### SSH Connect and Docker Image Pull and Container Run
    - name: Docker Image Pull and Container Run
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker stop line4-bdns-web
          docker rm line4-bdns-web
          docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          docker run -d --name line4-bdns-web -p 3000:80 --net line4-bdns ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}